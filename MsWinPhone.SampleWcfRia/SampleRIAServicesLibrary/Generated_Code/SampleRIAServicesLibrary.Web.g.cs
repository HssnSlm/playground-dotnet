//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleRIAServicesLibrary.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'WCFWebService' DomainService.
    /// </summary>
    public sealed partial class WCFWebContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WCFWebContext"/> class.
        /// </summary>
        public WCFWebContext() : 
                this(new WebDomainClient<IWCFWebServiceContract>(new Uri("SampleRIAServicesLibrary-Web-WCFWebService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WCFWebContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WCFWebService service URI.</param>
        public WCFWebContext(Uri serviceUri) : 
                this(new WebDomainClient<IWCFWebServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WCFWebContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public WCFWebContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMessage' method of the DomainService.
        /// </summary>
        /// <param name="input">The value for the 'input' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetMessage(string input, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("input", input);
            this.ValidateMethod("GetMessage", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetMessage", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetMessage' method of the DomainService.
        /// </summary>
        /// <param name="input">The value for the 'input' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetMessage(string input)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("input", input);
            this.ValidateMethod("GetMessage", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetMessage", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WCFWebContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WCFWebService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IWCFWebServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMessage' operation.
            /// </summary>
            /// <param name="input">The value for the 'input' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WCFWebService/GetMessageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WCFWebService/GetMessage", ReplyAction="http://tempuri.org/WCFWebService/GetMessageResponse")]
            IAsyncResult BeginGetMessage(string input, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMessage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMessage'.</param>
            /// <returns>The 'String' returned from the 'GetMessage' operation.</returns>
            string EndGetMessage(IAsyncResult result);
        }
        
        internal sealed class WCFWebContextEntityContainer : EntityContainer
        {
            
            public WCFWebContextEntityContainer()
            {
            }
        }
    }
}
